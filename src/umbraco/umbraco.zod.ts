/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: v2
 */
import { z as zod } from 'zod'
import { stripNill } from '../mutators'

export const getContentQuerySkipDefault = 0
export const getContentQueryTakeDefault = 10

export const getContentQueryParams = zod.object({
	fetch: zod
		.string()
		.optional()
		.describe(
			'Specifies the content items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	filter: zod
		.array(zod.string())
		.optional()
		.describe(
			'Defines how to filter the fetched content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe(
			'Defines how to sort the found content items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	skip: zod.number().optional().describe('Specifies the number of found content items to skip. Use this to control pagination of the response.'),
	take: zod
		.number()
		.default(getContentQueryTakeDefault)
		.describe('Specifies the number of found content items to take. Use this to control pagination of the response.'),
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		)
})

export const getContentHeader = zod.object({
	'Accept-Language': zod.string().optional().describe('Defines the language to return. Use this when querying language variant content items.'),
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.'),
	Preview: zod.boolean().optional().describe('Whether to request draft content.'),
	'Start-Item': zod.string().optional().describe('URL segment or GUID of a root content item.')
})

export const getContentResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			total: zod.number(),
			items: zod.array(
				zod
					.object({
						id: zod.string().uuid().optional(),
						contentType: zod.string().optional(),
						properties: zod.record(zod.string(), zod.any().nullable()).optional(),
						name: zod.string().nullish(),
						createDate: zod.string().datetime({}).optional(),
						updateDate: zod.string().datetime({}).optional(),
						route: zod
							.object({
								path: zod.string().optional(),
								startItem: zod
									.object({
										id: zod.string().uuid().optional(),
										path: zod.string().optional()
									})
									.strict()
									.optional()
							})
							.strict()
							.optional(),
						cultures: zod
							.record(
								zod.string(),
								zod
									.object({
										path: zod.string().optional(),
										startItem: zod
											.object({
												id: zod.string().uuid().optional(),
												path: zod.string().optional()
											})
											.strict()
											.optional()
									})
									.strict()
							)
							.optional()
					})
					.strict()
			)
		})
		.strict()
)

export const getContentItemByPathPathPathDefault = ''

export const getContentItemByPathParams = zod.object({
	path: zod.string()
})

export const getContentItemByPathQueryParams = zod.object({
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		)
})

export const getContentItemByPathHeader = zod.object({
	'Accept-Language': zod.string().optional().describe('Defines the language to return. Use this when querying language variant content items.'),
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.'),
	Preview: zod.boolean().optional().describe('Whether to request draft content.'),
	'Start-Item': zod.string().optional().describe('URL segment or GUID of a root content item.')
})

export const getContentItemByPathResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			id: zod.string().uuid().optional(),
			contentType: zod.string().optional(),
			properties: zod.record(zod.string(), zod.any().nullable()).optional(),
			name: zod.string().nullish(),
			createDate: zod.string().datetime({}).optional(),
			updateDate: zod.string().datetime({}).optional(),
			route: zod
				.object({
					path: zod.string().optional(),
					startItem: zod
						.object({
							id: zod.string().uuid().optional(),
							path: zod.string().optional()
						})
						.strict()
						.optional()
				})
				.strict()
				.optional(),
			cultures: zod
				.record(
					zod.string(),
					zod
						.object({
							path: zod.string().optional(),
							startItem: zod
								.object({
									id: zod.string().uuid().optional(),
									path: zod.string().optional()
								})
								.strict()
								.optional()
						})
						.strict()
				)
				.optional()
		})
		.strict()
)

export const getContentItemByIdParams = zod.object({
	id: zod.string().uuid()
})

export const getContentItemByIdQueryParams = zod.object({
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		)
})

export const getContentItemByIdHeader = zod.object({
	'Accept-Language': zod.string().optional().describe('Defines the language to return. Use this when querying language variant content items.'),
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.'),
	Preview: zod.boolean().optional().describe('Whether to request draft content.'),
	'Start-Item': zod.string().optional().describe('URL segment or GUID of a root content item.')
})

export const getContentItemByIdResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			id: zod.string().uuid().optional(),
			contentType: zod.string().optional(),
			properties: zod.record(zod.string(), zod.any().nullable()).optional(),
			name: zod.string().nullish(),
			createDate: zod.string().datetime({}).optional(),
			updateDate: zod.string().datetime({}).optional(),
			route: zod
				.object({
					path: zod.string().optional(),
					startItem: zod
						.object({
							id: zod.string().uuid().optional(),
							path: zod.string().optional()
						})
						.strict()
						.optional()
				})
				.strict()
				.optional(),
			cultures: zod
				.record(
					zod.string(),
					zod
						.object({
							path: zod.string().optional(),
							startItem: zod
								.object({
									id: zod.string().uuid().optional(),
									path: zod.string().optional()
								})
								.strict()
								.optional()
						})
						.strict()
				)
				.optional()
		})
		.strict()
)

export const getContentItemsQueryParams = zod.object({
	id: zod.array(zod.string().uuid()).optional(),
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api#query-parameters) for more details on this.'
		)
})

export const getContentItemsHeader = zod.object({
	'Accept-Language': zod.string().optional().describe('Defines the language to return. Use this when querying language variant content items.'),
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.'),
	Preview: zod.boolean().optional().describe('Whether to request draft content.'),
	'Start-Item': zod.string().optional().describe('URL segment or GUID of a root content item.')
})

export const getContentItemsResponseItem = zod.preprocess(
	stripNill,
	zod
		.object({
			id: zod.string().uuid().optional(),
			contentType: zod.string().optional(),
			properties: zod.record(zod.string(), zod.any().nullable()).optional(),
			name: zod.string().nullish(),
			createDate: zod.string().datetime({}).optional(),
			updateDate: zod.string().datetime({}).optional(),
			route: zod
				.object({
					path: zod.string().optional(),
					startItem: zod
						.object({
							id: zod.string().uuid().optional(),
							path: zod.string().optional()
						})
						.strict()
						.optional()
				})
				.strict()
				.optional(),
			cultures: zod
				.record(
					zod.string(),
					zod
						.object({
							path: zod.string().optional(),
							startItem: zod
								.object({
									id: zod.string().uuid().optional(),
									path: zod.string().optional()
								})
								.strict()
								.optional()
						})
						.strict()
				)
				.optional()
		})
		.strict()
)
export const getContentItemsResponse = zod.array(getContentItemsResponseItem)

export const getMediaQuerySkipDefault = 0
export const getMediaQueryTakeDefault = 10

export const getMediaQueryParams = zod.object({
	fetch: zod
		.string()
		.optional()
		.describe(
			'Specifies the media items to fetch. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	filter: zod
		.array(zod.string())
		.optional()
		.describe(
			'Defines how to filter the fetched media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	sort: zod
		.array(zod.string())
		.optional()
		.describe(
			'Defines how to sort the found media items. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	skip: zod.number().optional().describe('Specifies the number of found media items to skip. Use this to control pagination of the response.'),
	take: zod
		.number()
		.default(getMediaQueryTakeDefault)
		.describe('Specifies the number of found media items to take. Use this to control pagination of the response.'),
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		)
})

export const getMediaHeader = zod.object({
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.')
})

export const getMediaResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			total: zod.number(),
			items: zod.array(
				zod
					.object({
						id: zod.string().uuid().optional(),
						name: zod.string().optional(),
						mediaType: zod.string().optional(),
						url: zod.string().optional(),
						extension: zod.string().nullish(),
						width: zod.number().nullish(),
						height: zod.number().nullish(),
						bytes: zod.number().nullish(),
						properties: zod.record(zod.string(), zod.any().nullable()).optional(),
						focalPoint: zod
							.object({
								left: zod.number().optional(),
								top: zod.number().optional()
							})
							.strict()
							.optional(),
						crops: zod
							.array(
								zod
									.object({
										alias: zod.string().nullish(),
										width: zod.number().optional(),
										height: zod.number().optional(),
										coordinates: zod
											.object({
												x1: zod.number().optional(),
												y1: zod.number().optional(),
												x2: zod.number().optional(),
												y2: zod.number().optional()
											})
											.strict()
											.optional()
									})
									.strict()
							)
							.nullish(),
						path: zod.string().optional(),
						createDate: zod.string().datetime({}).optional(),
						updateDate: zod.string().datetime({}).optional()
					})
					.strict()
			)
		})
		.strict()
)

export const getMediaItemByPathParams = zod.object({
	path: zod.string()
})

export const getMediaItemByPathQueryParams = zod.object({
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		)
})

export const getMediaItemByPathHeader = zod.object({
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.')
})

export const getMediaItemByPathResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			id: zod.string().uuid().optional(),
			name: zod.string().optional(),
			mediaType: zod.string().optional(),
			url: zod.string().optional(),
			extension: zod.string().nullish(),
			width: zod.number().nullish(),
			height: zod.number().nullish(),
			bytes: zod.number().nullish(),
			properties: zod.record(zod.string(), zod.any().nullable()).optional(),
			focalPoint: zod
				.object({
					left: zod.number().optional(),
					top: zod.number().optional()
				})
				.strict()
				.optional(),
			crops: zod
				.array(
					zod
						.object({
							alias: zod.string().nullish(),
							width: zod.number().optional(),
							height: zod.number().optional(),
							coordinates: zod
								.object({
									x1: zod.number().optional(),
									y1: zod.number().optional(),
									x2: zod.number().optional(),
									y2: zod.number().optional()
								})
								.strict()
								.optional()
						})
						.strict()
				)
				.nullish(),
			path: zod.string().optional(),
			createDate: zod.string().datetime({}).optional(),
			updateDate: zod.string().datetime({}).optional()
		})
		.strict()
)

export const getMediaItemByIdParams = zod.object({
	id: zod.string().uuid()
})

export const getMediaItemByIdQueryParams = zod.object({
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		)
})

export const getMediaItemByIdHeader = zod.object({
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.')
})

export const getMediaItemByIdResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			id: zod.string().uuid().optional(),
			name: zod.string().optional(),
			mediaType: zod.string().optional(),
			url: zod.string().optional(),
			extension: zod.string().nullish(),
			width: zod.number().nullish(),
			height: zod.number().nullish(),
			bytes: zod.number().nullish(),
			properties: zod.record(zod.string(), zod.any().nullable()).optional(),
			focalPoint: zod
				.object({
					left: zod.number().optional(),
					top: zod.number().optional()
				})
				.strict()
				.optional(),
			crops: zod
				.array(
					zod
						.object({
							alias: zod.string().nullish(),
							width: zod.number().optional(),
							height: zod.number().optional(),
							coordinates: zod
								.object({
									x1: zod.number().optional(),
									y1: zod.number().optional(),
									x2: zod.number().optional(),
									y2: zod.number().optional()
								})
								.strict()
								.optional()
						})
						.strict()
				)
				.nullish(),
			path: zod.string().optional(),
			createDate: zod.string().datetime({}).optional(),
			updateDate: zod.string().datetime({}).optional()
		})
		.strict()
)

export const getMediaItemsQueryParams = zod.object({
	id: zod.array(zod.string().uuid()).optional(),
	expand: zod
		.string()
		.optional()
		.describe(
			'Defines the properties that should be expanded in the response. Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		),
	fields: zod
		.string()
		.optional()
		.describe(
			'Explicitly defines which properties should be included in the response (by default all properties are included). Refer to [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api/media-delivery-api#query-parameters) for more details on this.'
		)
})

export const getMediaItemsHeader = zod.object({
	'Api-Key': zod.string().describe('API key specified through configuration to authorize access to the API.')
})

export const getMediaItemsResponseItem = zod.preprocess(
	stripNill,
	zod
		.object({
			id: zod.string().uuid().optional(),
			name: zod.string().optional(),
			mediaType: zod.string().optional(),
			url: zod.string().optional(),
			extension: zod.string().nullish(),
			width: zod.number().nullish(),
			height: zod.number().nullish(),
			bytes: zod.number().nullish(),
			properties: zod.record(zod.string(), zod.any().nullable()).optional(),
			focalPoint: zod
				.object({
					left: zod.number().optional(),
					top: zod.number().optional()
				})
				.strict()
				.optional(),
			crops: zod
				.array(
					zod
						.object({
							alias: zod.string().nullish(),
							width: zod.number().optional(),
							height: zod.number().optional(),
							coordinates: zod
								.object({
									x1: zod.number().optional(),
									y1: zod.number().optional(),
									x2: zod.number().optional(),
									y2: zod.number().optional()
								})
								.strict()
								.optional()
						})
						.strict()
				)
				.nullish(),
			path: zod.string().optional(),
			createDate: zod.string().datetime({}).optional(),
			updateDate: zod.string().datetime({}).optional()
		})
		.strict()
)
export const getMediaItemsResponse = zod.array(getMediaItemsResponseItem)

export const getNavigationItemsResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			locales: zod
				.record(
					zod.string(),
					zod
						.object({
							isDefault: zod.boolean().optional(),
							label: zod.string().optional(),
							isoCode: zod.string().optional(),
							defaultPath: zod.string().optional(),
							talentCommunityLink: zod.string().optional(),
							navigation: zod
								.array(
									zod
										.object({
											id: zod.string().optional(),
											title: zod.string().optional(),
											path: zod.string().optional(),
											children: zod
												.array(
													zod
														.object({
															id: zod.string().optional(),
															title: zod.string().optional(),
															path: zod.string().optional()
														})
														.strict()
												)
												.optional()
										})
										.strict()
								)
								.optional()
						})
						.strict()
				)
				.optional()
		})
		.strict()
)

export const getTranslationsItemsResponse = zod.preprocess(
	stripNill,
	zod
		.object({
			languages: zod.array(zod.string()).optional(),
			dictionaries: zod
				.array(
					zod
						.object({
							name: zod.string().optional()
						})
						.strict()
				)
				.optional()
		})
		.strict()
)
