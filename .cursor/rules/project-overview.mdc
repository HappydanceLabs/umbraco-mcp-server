---
description: Global overview of the Umbraco Headless CMS multi lingual Next.js project
globs: 
---
# Project Overview

This project is a robust Next.js 15 application built with TypeScript and React using the App Router architecture. It integrates with Umbraco CMS through webhooks to enable real-time content updates and dynamic data handling. The application leverages server components for enhanced performance and utilizes:

- Azure AI Search for storage of Jobs and performing Job Search
- Umbraco Content Delivery API for consuming content headlessly
- i18n techniques to deliver a multilingual experience

The user interface is crafted with Tailwind CSS for a responsive design and enriched with accessible, prebuilt components from Shadcn UI.

## Code Style Requirements

- Write concise, technical responses with accurate TypeScript examples
- Use functional, declarative programming; avoid classes
- Prefer iteration and modularization over duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Utilize the RORO (Receive an Object, Return an Object) pattern for function interfaces
- Favor named exports for components and utilities
- Use the `function` keyword for pure functions and omit semicolons
- Apply early returns and guard clauses to simplify error handling
- Implement accessibility features (ARIA labels, roles, etc.) where needed
- Use React Server Components (RSC) for data fetching and server-side logic; only use "use client" for explicit client-side behavior

## Technical Configuration

- Framework: Next.js 15 (App Router)
- Package Manager: npm
- CSS Framework: Tailwind CSS
- UI Components: Shadcn UI and Radix UI
- Build Tool: Next.js (using Turbopack)
- TypeScript is used throughout the codebase

## Project Structure

- app/ – Contains Next.js server components, pages, and layouts
- src/ – Houses shared code (utilities, hooks, and non-compiled modules)
- public/ – Contains static assets such as images, fonts, and icons
- Configuration and secrets are managed using .env files (refer to .env.example)

## Tooling

- ESLint for code linting
- Prettier for code formatting
- TypeScript for type safety and clearer code contracts

## Error Handling and Performance Guidelines

- Use try/catch blocks and guard clauses to handle asynchronous errors early
- Implement robust error boundaries with clear, user-friendly error messages
- Optimize performance by lazy-loading components, preloading data, and employing effective caching strategies
- Leverage React Server Components and Next.js built-in optimizations to minimize bundle size and improve load times

## Documentation

- Use JSDoc comments for all complex functions and components
- Clearly document component props, events, and code behaviors
- Maintain an up-to-date README with setup, development, and deployment instructions
- Document any non-obvious patterns or integrations with Umbraco and Azure AI Search

## Remember to:

- Follow the DRY principle
- Write self-documenting code
- Consider edge cases
- Implement proper error handling
- Ensure accessibility compliance
- Optimize for performance