/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: Latest
 */
import type {
	GetMedia20Params,
	GetMediaItemById20Params,
	GetMediaItemByPath20Params,
	GetMediaItems20Params,
	IApiMediaWithCropsResponseModel,
	PagedIApiMediaWithCropsResponseModel,
	ProblemDetails
} from '.././schemas'

import { UmbracoClient, UmbracoClientOptions } from '../../clients/umbraco-client'

export type getMedia20Response200 = {
	data: PagedIApiMediaWithCropsResponseModel
	status: 200
}

export type getMedia20Response400 = {
	data: ProblemDetails
	status: 400
}

export type getMedia20ResponseComposite = getMedia20Response200 | getMedia20Response400

export type getMedia20Response = getMedia20ResponseComposite & {
	headers: Headers
}

export const getGetMedia20Url = (params?: GetMedia20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/media?${stringifiedParams}`
		: '/umbraco/delivery/api/v2/media'
}

export const getMedia20 = async (
	params?: GetMedia20Params,
	options?: RequestInit
): Promise<getMedia20Response> => {
	return UmbracoClient<getMedia20Response>(getGetMedia20Url(params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}

export type getMediaItemByPath20Response200 = {
	data: IApiMediaWithCropsResponseModel
	status: 200
}

export type getMediaItemByPath20Response404 = {
	data: ProblemDetails
	status: 404
}

export type getMediaItemByPath20ResponseComposite =
	| getMediaItemByPath20Response200
	| getMediaItemByPath20Response404

export type getMediaItemByPath20Response = getMediaItemByPath20ResponseComposite & {
	headers: Headers
}

export const getGetMediaItemByPath20Url = (path: string, params?: GetMediaItemByPath20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/media/item/${path}?${stringifiedParams}`
		: `/umbraco/delivery/api/v2/media/item/${path}`
}

export const getMediaItemByPath20 = async (
	path: string,
	params?: GetMediaItemByPath20Params,
	options?: RequestInit
): Promise<getMediaItemByPath20Response> => {
	return UmbracoClient<getMediaItemByPath20Response>(getGetMediaItemByPath20Url(path, params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}

export type getMediaItemById20Response200 = {
	data: IApiMediaWithCropsResponseModel
	status: 200
}

export type getMediaItemById20Response404 = {
	data: ProblemDetails
	status: 404
}

export type getMediaItemById20ResponseComposite =
	| getMediaItemById20Response200
	| getMediaItemById20Response404

export type getMediaItemById20Response = getMediaItemById20ResponseComposite & {
	headers: Headers
}

export const getGetMediaItemById20Url = (id: string, params?: GetMediaItemById20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/media/item/${id}?${stringifiedParams}`
		: `/umbraco/delivery/api/v2/media/item/${id}`
}

export const getMediaItemById20 = async (
	id: string,
	params?: GetMediaItemById20Params,
	options?: RequestInit
): Promise<getMediaItemById20Response> => {
	return UmbracoClient<getMediaItemById20Response>(getGetMediaItemById20Url(id, params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}

export type getMediaItems20Response200 = {
	data: IApiMediaWithCropsResponseModel[]
	status: 200
}

export type getMediaItems20ResponseComposite = getMediaItems20Response200

export type getMediaItems20Response = getMediaItems20ResponseComposite & {
	headers: Headers
}

export const getGetMediaItems20Url = (params?: GetMediaItems20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/media/items?${stringifiedParams}`
		: '/umbraco/delivery/api/v2/media/items'
}

export const getMediaItems20 = async (
	params?: GetMediaItems20Params,
	options?: RequestInit
): Promise<getMediaItems20Response> => {
	return UmbracoClient<getMediaItems20Response>(getGetMediaItems20Url(params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}
