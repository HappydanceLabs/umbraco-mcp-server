/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Umbraco Delivery API
 * You can find out more about the Umbraco Delivery API in [the documentation](https://docs.umbraco.com/umbraco-cms/reference/content-delivery-api).
 * OpenAPI spec version: Latest
 */
import type {
	GetContent20Params,
	GetContentItemById20Params,
	GetContentItemByPath20Params,
	GetContentItems20Params,
	IApiContentResponseModel,
	PagedIApiContentResponseModel,
	ProblemDetails
} from '.././schemas'

import { UmbracoClient, UmbracoClientOptions } from '../../clients/umbraco-client'

export type getContent20Response200 = {
	data: PagedIApiContentResponseModel
	status: 200
}

export type getContent20Response400 = {
	data: ProblemDetails
	status: 400
}

export type getContent20ResponseComposite = getContent20Response200 | getContent20Response400

export type getContent20Response = getContent20ResponseComposite & {
	headers: Headers
}

export const getGetContent20Url = (params?: GetContent20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/content?${stringifiedParams}`
		: '/umbraco/delivery/api/v2/content'
}

export const getContent20 = async (
	params?: GetContent20Params,
	options?: RequestInit
): Promise<getContent20Response> => {
	return UmbracoClient<getContent20Response>(getGetContent20Url(params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}

export type getContentItemByPath20Response200 = {
	data: IApiContentResponseModel
	status: 200
}

export type getContentItemByPath20Response401 = {
	data: ProblemDetails
	status: 401
}

export type getContentItemByPath20ResponseComposite =
	| getContentItemByPath20Response200
	| getContentItemByPath20Response401

export type getContentItemByPath20Response = getContentItemByPath20ResponseComposite & {
	headers: Headers
}

export const getGetContentItemByPath20Url = (
	path: string,
	params?: GetContentItemByPath20Params
) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/content/item/${path}?${stringifiedParams}`
		: `/umbraco/delivery/api/v2/content/item/${path}`
}

export const getContentItemByPath20 = async (
	path: string,
	params?: GetContentItemByPath20Params,
	options?: RequestInit
): Promise<getContentItemByPath20Response> => {
	return UmbracoClient<getContentItemByPath20Response>(
		getGetContentItemByPath20Url(path, params),
		{
			...(options as UmbracoClientOptions),
			method: 'GET'
		}
	)
}

export type getContentItemById20Response200 = {
	data: IApiContentResponseModel
	status: 200
}

export type getContentItemById20Response401 = {
	data: ProblemDetails
	status: 401
}

export type getContentItemById20ResponseComposite =
	| getContentItemById20Response200
	| getContentItemById20Response401

export type getContentItemById20Response = getContentItemById20ResponseComposite & {
	headers: Headers
}

export const getGetContentItemById20Url = (id: string, params?: GetContentItemById20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/content/item/${id}?${stringifiedParams}`
		: `/umbraco/delivery/api/v2/content/item/${id}`
}

export const getContentItemById20 = async (
	id: string,
	params?: GetContentItemById20Params,
	options?: RequestInit
): Promise<getContentItemById20Response> => {
	return UmbracoClient<getContentItemById20Response>(getGetContentItemById20Url(id, params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}

export type getContentItems20Response200 = {
	data: IApiContentResponseModel[]
	status: 200
}

export type getContentItems20Response401 = {
	data: ProblemDetails
	status: 401
}

export type getContentItems20ResponseComposite =
	| getContentItems20Response200
	| getContentItems20Response401

export type getContentItems20Response = getContentItems20ResponseComposite & {
	headers: Headers
}

export const getGetContentItems20Url = (params?: GetContentItems20Params) => {
	const normalizedParams = new URLSearchParams()

	Object.entries(params || {}).forEach(([key, value]) => {
		if (value !== undefined) {
			normalizedParams.append(key, value === null ? 'null' : value.toString())
		}
	})

	const stringifiedParams = normalizedParams.toString()

	return stringifiedParams.length > 0
		? `/umbraco/delivery/api/v2/content/items?${stringifiedParams}`
		: '/umbraco/delivery/api/v2/content/items'
}

export const getContentItems20 = async (
	params?: GetContentItems20Params,
	options?: RequestInit
): Promise<getContentItems20Response> => {
	return UmbracoClient<getContentItems20Response>(getGetContentItems20Url(params), {
		...(options as UmbracoClientOptions),
		method: 'GET'
	})
}
